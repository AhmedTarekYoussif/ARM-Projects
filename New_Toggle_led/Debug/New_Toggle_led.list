
New_Toggle_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000944  08000944  0001094c  2**0
                  CONTENTS
  4 .ARM          00000000  08000944  08000944  0001094c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000944  0800094c  0001094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000944  08000944  00010944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800094c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800094c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001094c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a8e  00000000  00000000  00010975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000598  00000000  00000000  00011403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000119a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00011b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fcf  00000000  00000000  00011c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a80  00000000  00000000  00012c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d5e  00000000  00000000  00013697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000173f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000448  00000000  00000000  00017448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000914 	.word	0x08000914

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000914 	.word	0x08000914

08000170 <_delay_ms>:
#include	"SSD_int.h"
#include 	"LCD_int.h"


static void	_delay_ms(u32 _ms)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e003      	b.n	8000186 <_delay_ms+0x16>
	{
		asm("NOP");
 800017e:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800018c:	fb02 f303 	mul.w	r3, r2, r3
 8000190:	68fa      	ldr	r2, [r7, #12]
 8000192:	429a      	cmp	r2, r3
 8000194:	d3f3      	bcc.n	800017e <_delay_ms+0xe>
	}
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	3714      	adds	r7, #20
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <main>:


int	main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0

	u8 value = NOT_PRESSED_ACTIVE_LOW;
 80001aa:	2301      	movs	r3, #1
 80001ac:	73fb      	strb	r3, [r7, #15]
	PB_t  PB1 = {1,PORTB,PIN11,ACTIVE_LOW};
 80001ae:	4b17      	ldr	r3, [pc, #92]	; (800020c <main+0x68>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	607b      	str	r3, [r7, #4]
	s32 i = 0 ;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60bb      	str	r3, [r7, #8]

	/*	Initialization Part		*/

	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 80001b8:	f000 faca 	bl	8000750 <MRCC_voidSysClkInit>

	/*	Toggle Led A2 GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port A		*/
	MRCC_voidEnablePerClk(RCC_APB2,2);
 80001bc:	2102      	movs	r1, #2
 80001be:	2002      	movs	r0, #2
 80001c0:	f000 fae2 	bl	8000788 <MRCC_voidEnablePerClk>

	/*	2- Enable Per Clk "RCC" Port B		*/
	MRCC_voidEnablePerClk(RCC_APB2,3);
 80001c4:	2103      	movs	r1, #3
 80001c6:	2002      	movs	r0, #2
 80001c8:	f000 fade 	bl	8000788 <MRCC_voidEnablePerClk>


	/*	Direction for A2 is output Push Pull */
	MDIO_voidSetPinDirection(PORTA, PIN2, OUT_2MHZ_PP);
 80001cc:	2202      	movs	r2, #2
 80001ce:	2102      	movs	r1, #2
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 f821 	bl	8000218 <MDIO_voidSetPinDirection>

	/* init PB */
	H_PB_Void_init(&PB1);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 faa8 	bl	800072e <H_PB_Void_init>

	/* init SSD */
	H_SSD_Void_init();
 80001de:	f000 fb15 	bl	800080c <H_SSD_Void_init>

	/* init LCD*/
	H_LCD_void_Init() ;
 80001e2:	f000 f980 	bl	80004e6 <H_LCD_void_Init>
	while(1)
	{
		H_LCD_void_clear() ;
 80001e6:	f000 fa1a 	bl	800061e <H_LCD_void_clear>
		H_LCD_void_sendString("My Name") ;
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x6c>)
 80001ec:	f000 f9fe 	bl	80005ec <H_LCD_void_sendString>
		_delay_ms(1000) ;
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f7ff ffbc 	bl	8000170 <_delay_ms>
		H_LCD_void_clear() ;
 80001f8:	f000 fa11 	bl	800061e <H_LCD_void_clear>
		H_LCD_void_sendString("Ahmed Tarek") ;
 80001fc:	4805      	ldr	r0, [pc, #20]	; (8000214 <main+0x70>)
 80001fe:	f000 f9f5 	bl	80005ec <H_LCD_void_sendString>
		_delay_ms(1000) ;
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f7ff ffb3 	bl	8000170 <_delay_ms>
		H_LCD_void_clear() ;
 800020a:	e7ec      	b.n	80001e6 <main+0x42>
 800020c:	08000940 	.word	0x08000940
 8000210:	0800092c 	.word	0x0800092c
 8000214:	08000934 	.word	0x08000934

08000218 <MDIO_voidSetPinDirection>:
#include	"DIO_interface.h"
#include	"DIO_private.h"


void	MDIO_voidSetPinDirection(u8 PortId, u8 PinId, u8 Direction)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	460b      	mov	r3, r1
 8000224:	71bb      	strb	r3, [r7, #6]
 8000226:	4613      	mov	r3, r2
 8000228:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16 && Direction < 16)
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b02      	cmp	r3, #2
 800022e:	f200 80b6 	bhi.w	800039e <MDIO_voidSetPinDirection+0x186>
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	f200 80b2 	bhi.w	800039e <MDIO_voidSetPinDirection+0x186>
 800023a:	797b      	ldrb	r3, [r7, #5]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	f200 80ae 	bhi.w	800039e <MDIO_voidSetPinDirection+0x186>
	{
		if(PinId < 8) /*	Pin0 : Pin7 ==> CRL	*/
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	2b07      	cmp	r3, #7
 8000246:	d852      	bhi.n	80002ee <MDIO_voidSetPinDirection+0xd6>
		{
			switch(PortId)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2b02      	cmp	r3, #2
 800024c:	d037      	beq.n	80002be <MDIO_voidSetPinDirection+0xa6>
 800024e:	2b02      	cmp	r3, #2
 8000250:	f300 80a5 	bgt.w	800039e <MDIO_voidSetPinDirection+0x186>
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <MDIO_voidSetPinDirection+0x46>
 8000258:	2b01      	cmp	r3, #1
 800025a:	d018      	beq.n	800028e <MDIO_voidSetPinDirection+0x76>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}	
}
 800025c:	e09f      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTA	:	GPIOA_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800025e:	4b52      	ldr	r3, [pc, #328]	; (80003a8 <MDIO_voidSetPinDirection+0x190>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	210f      	movs	r1, #15
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	43d2      	mvns	r2, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a4d      	ldr	r2, [pc, #308]	; (80003a8 <MDIO_voidSetPinDirection+0x190>)
 8000272:	400b      	ands	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000276:	4b4c      	ldr	r3, [pc, #304]	; (80003a8 <MDIO_voidSetPinDirection+0x190>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	7979      	ldrb	r1, [r7, #5]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	0092      	lsls	r2, r2, #2
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a48      	ldr	r2, [pc, #288]	; (80003a8 <MDIO_voidSetPinDirection+0x190>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
			break;
 800028c:	e087      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTB	:	GPIOB_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800028e:	4b47      	ldr	r3, [pc, #284]	; (80003ac <MDIO_voidSetPinDirection+0x194>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	79ba      	ldrb	r2, [r7, #6]
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	210f      	movs	r1, #15
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	43d2      	mvns	r2, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a42      	ldr	r2, [pc, #264]	; (80003ac <MDIO_voidSetPinDirection+0x194>)
 80002a2:	400b      	ands	r3, r1
 80002a4:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80002a6:	4b41      	ldr	r3, [pc, #260]	; (80003ac <MDIO_voidSetPinDirection+0x194>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	7979      	ldrb	r1, [r7, #5]
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a3d      	ldr	r2, [pc, #244]	; (80003ac <MDIO_voidSetPinDirection+0x194>)
 80002b8:	430b      	orrs	r3, r1
 80002ba:	6013      	str	r3, [r2, #0]
			break;
 80002bc:	e06f      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTC	:	GPIOC_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80002be:	4b3c      	ldr	r3, [pc, #240]	; (80003b0 <MDIO_voidSetPinDirection+0x198>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0092      	lsls	r2, r2, #2
 80002c6:	210f      	movs	r1, #15
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a37      	ldr	r2, [pc, #220]	; (80003b0 <MDIO_voidSetPinDirection+0x198>)
 80002d2:	400b      	ands	r3, r1
 80002d4:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80002d6:	4b36      	ldr	r3, [pc, #216]	; (80003b0 <MDIO_voidSetPinDirection+0x198>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	7979      	ldrb	r1, [r7, #5]
 80002dc:	79ba      	ldrb	r2, [r7, #6]
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a32      	ldr	r2, [pc, #200]	; (80003b0 <MDIO_voidSetPinDirection+0x198>)
 80002e8:	430b      	orrs	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
			break;
 80002ec:	e057      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
		}else if(PinId < 16) /*	Pin8 : Pin15 ==> CRH	*/
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	2b0f      	cmp	r3, #15
 80002f2:	d854      	bhi.n	800039e <MDIO_voidSetPinDirection+0x186>
			PinId -= 8 ;
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	3b08      	subs	r3, #8
 80002f8:	71bb      	strb	r3, [r7, #6]
			switch(PortId)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d036      	beq.n	800036e <MDIO_voidSetPinDirection+0x156>
 8000300:	2b02      	cmp	r3, #2
 8000302:	dc4c      	bgt.n	800039e <MDIO_voidSetPinDirection+0x186>
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <MDIO_voidSetPinDirection+0xf6>
 8000308:	2b01      	cmp	r3, #1
 800030a:	d018      	beq.n	800033e <MDIO_voidSetPinDirection+0x126>
}
 800030c:	e047      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTA	:	GPIOA_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MDIO_voidSetPinDirection+0x19c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	79ba      	ldrb	r2, [r7, #6]
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	210f      	movs	r1, #15
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a24      	ldr	r2, [pc, #144]	; (80003b4 <MDIO_voidSetPinDirection+0x19c>)
 8000322:	400b      	ands	r3, r1
 8000324:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000326:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <MDIO_voidSetPinDirection+0x19c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	7979      	ldrb	r1, [r7, #5]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <MDIO_voidSetPinDirection+0x19c>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
			break;
 800033c:	e02f      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTB	:	GPIOB_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MDIO_voidSetPinDirection+0x1a0>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	210f      	movs	r1, #15
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	43d2      	mvns	r2, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <MDIO_voidSetPinDirection+0x1a0>)
 8000352:	400b      	ands	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MDIO_voidSetPinDirection+0x1a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	7979      	ldrb	r1, [r7, #5]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <MDIO_voidSetPinDirection+0x1a0>)
 8000368:	430b      	orrs	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
			break;
 800036c:	e017      	b.n	800039e <MDIO_voidSetPinDirection+0x186>
			case PORTC	:	GPIOC_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MDIO_voidSetPinDirection+0x1a4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	79ba      	ldrb	r2, [r7, #6]
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	210f      	movs	r1, #15
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	43d2      	mvns	r2, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <MDIO_voidSetPinDirection+0x1a4>)
 8000382:	400b      	ands	r3, r1
 8000384:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MDIO_voidSetPinDirection+0x1a4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	7979      	ldrb	r1, [r7, #5]
 800038c:	79ba      	ldrb	r2, [r7, #6]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a09      	ldr	r2, [pc, #36]	; (80003bc <MDIO_voidSetPinDirection+0x1a4>)
 8000398:	430b      	orrs	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
			break;
 800039c:	bf00      	nop
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010804 	.word	0x40010804
 80003b8:	40010c04 	.word	0x40010c04
 80003bc:	40011004 	.word	0x40011004

080003c0 <MDIO_voidSetPinValue>:
void	MDIO_voidSetPinValue(u8 PortId, u8 PinId, u8 Value)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	460b      	mov	r3, r1
 80003cc:	71bb      	strb	r3, [r7, #6]
 80003ce:	4613      	mov	r3, r2
 80003d0:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d861      	bhi.n	800049c <MDIO_voidSetPinValue+0xdc>
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2b0f      	cmp	r3, #15
 80003dc:	d85e      	bhi.n	800049c <MDIO_voidSetPinValue+0xdc>
	{
		if(Value == DIO_LOW)
 80003de:	797b      	ldrb	r3, [r7, #5]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d12d      	bne.n	8000440 <MDIO_voidSetPinValue+0x80>
		{
			switch(PortId)
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d01e      	beq.n	8000428 <MDIO_voidSetPinValue+0x68>
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	dc56      	bgt.n	800049c <MDIO_voidSetPinValue+0xdc>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <MDIO_voidSetPinValue+0x38>
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d00c      	beq.n	8000410 <MDIO_voidSetPinValue+0x50>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}		
}
 80003f6:	e051      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTA	:	CLR_BIT(GPIOA_ODR ,PinId);	break;
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <MDIO_voidSetPinValue+0xe8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	79ba      	ldrb	r2, [r7, #6]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	43d2      	mvns	r2, r2
 8000406:	4611      	mov	r1, r2
 8000408:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <MDIO_voidSetPinValue+0xe8>)
 800040a:	400b      	ands	r3, r1
 800040c:	6013      	str	r3, [r2, #0]
 800040e:	e045      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTB	:	CLR_BIT(GPIOB_ODR ,PinId);	break;
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <MDIO_voidSetPinValue+0xec>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a22      	ldr	r2, [pc, #136]	; (80004ac <MDIO_voidSetPinValue+0xec>)
 8000422:	400b      	ands	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	e039      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTC	:	CLR_BIT(GPIOC_ODR ,PinId);	break;
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <MDIO_voidSetPinValue+0xf0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	79ba      	ldrb	r2, [r7, #6]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <MDIO_voidSetPinValue+0xf0>)
 800043a:	400b      	ands	r3, r1
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	e02d      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
		}else if(Value == DIO_HIGH)
 8000440:	797b      	ldrb	r3, [r7, #5]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d12a      	bne.n	800049c <MDIO_voidSetPinValue+0xdc>
			switch(PortId)
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d01c      	beq.n	8000486 <MDIO_voidSetPinValue+0xc6>
 800044c:	2b02      	cmp	r3, #2
 800044e:	dc25      	bgt.n	800049c <MDIO_voidSetPinValue+0xdc>
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <MDIO_voidSetPinValue+0x9a>
 8000454:	2b01      	cmp	r3, #1
 8000456:	d00b      	beq.n	8000470 <MDIO_voidSetPinValue+0xb0>
}
 8000458:	e020      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTA	:	SET_BIT(GPIOA_ODR ,PinId);	break;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MDIO_voidSetPinValue+0xe8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	79ba      	ldrb	r2, [r7, #6]
 8000460:	2101      	movs	r1, #1
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	4611      	mov	r1, r2
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <MDIO_voidSetPinValue+0xe8>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6013      	str	r3, [r2, #0]
 800046e:	e015      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTB	:	SET_BIT(GPIOB_ODR ,PinId);	break;
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MDIO_voidSetPinValue+0xec>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <MDIO_voidSetPinValue+0xec>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
 8000484:	e00a      	b.n	800049c <MDIO_voidSetPinValue+0xdc>
			case PORTC	:	SET_BIT(GPIOC_ODR ,PinId);	break;
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MDIO_voidSetPinValue+0xf0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	79ba      	ldrb	r2, [r7, #6]
 800048c:	2101      	movs	r1, #1
 800048e:	fa01 f202 	lsl.w	r2, r1, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <MDIO_voidSetPinValue+0xf0>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	bf00      	nop
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	4001080c 	.word	0x4001080c
 80004ac:	40010c0c 	.word	0x40010c0c
 80004b0:	4001100c 	.word	0x4001100c

080004b4 <_delay_ms>:
#include "LCD_config.h"
#include "LCD_int.h"


static void	_delay_ms(u32 _ms)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e003      	b.n	80004ca <_delay_ms+0x16>
	{
		asm("NOP");
 80004c2:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d3f3      	bcc.n	80004c2 <_delay_ms+0xe>
	}
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <H_LCD_void_Init>:

void H_LCD_void_Init(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0

	// set direction Rs, EN
	MDIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN,OUT_2MHZ_PP);
 80004ea:	2202      	movs	r2, #2
 80004ec:	210b      	movs	r1, #11
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff fe92 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUT_2MHZ_PP);
 80004f4:	2202      	movs	r2, #2
 80004f6:	2108      	movs	r1, #8
 80004f8:	2000      	movs	r0, #0
 80004fa:	f7ff fe8d 	bl	8000218 <MDIO_voidSetPinDirection>
	//set direction D4 .. D7
	MDIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,OUT_2MHZ_PP);
 80004fe:	2202      	movs	r2, #2
 8000500:	210c      	movs	r1, #12
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff fe88 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,OUT_2MHZ_PP);
 8000508:	2202      	movs	r2, #2
 800050a:	210d      	movs	r1, #13
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fe83 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,OUT_2MHZ_PP);
 8000512:	2202      	movs	r2, #2
 8000514:	210e      	movs	r1, #14
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff fe7e 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,OUT_2MHZ_PP);
 800051c:	2202      	movs	r2, #2
 800051e:	210f      	movs	r1, #15
 8000520:	2001      	movs	r0, #1
 8000522:	f7ff fe79 	bl	8000218 <MDIO_voidSetPinDirection>
	// send Init Sequence
#if(LCD_MODE  == LCD_8BIT_MODE_)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
 8000526:	2023      	movs	r0, #35	; 0x23
 8000528:	f7ff ffc4 	bl	80004b4 <_delay_ms>
	// Rs = command = 0
	MDIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 800052c:	2200      	movs	r2, #0
 800052e:	210b      	movs	r1, #11
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff ff45 	bl	80003c0 <MDIO_voidSetPinValue>
	// EN = 0 disabled
	MDIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 8000536:	2200      	movs	r2, #0
 8000538:	2108      	movs	r1, #8
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff ff40 	bl	80003c0 <MDIO_voidSetPinValue>
	// prepare data
	MDIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
 8000540:	2200      	movs	r2, #0
 8000542:	210c      	movs	r1, #12
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff ff3b 	bl	80003c0 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
 800054a:	2200      	movs	r2, #0
 800054c:	210d      	movs	r1, #13
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ff36 	bl	80003c0 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
 8000554:	2201      	movs	r2, #1
 8000556:	210e      	movs	r1, #14
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff31 	bl	80003c0 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
 800055e:	2200      	movs	r2, #0
 8000560:	210f      	movs	r1, #15
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ff2c 	bl	80003c0 <MDIO_voidSetPinValue>
	//EN = 1
	MDIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
 8000568:	2201      	movs	r2, #1
 800056a:	2108      	movs	r1, #8
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ff27 	bl	80003c0 <MDIO_voidSetPinValue>
	// delay 1 msec (to allow latching)
	_delay_ms(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff ff9e 	bl	80004b4 <_delay_ms>
	// EN = 0
	MDIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 8000578:	2200      	movs	r2, #0
 800057a:	2108      	movs	r1, #8
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ff1f 	bl	80003c0 <MDIO_voidSetPinValue>
	// delay to allow processing
	_delay_ms(5);
 8000582:	2005      	movs	r0, #5
 8000584:	f7ff ff96 	bl	80004b4 <_delay_ms>
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
 8000588:	2028      	movs	r0, #40	; 0x28
 800058a:	f000 f81d 	bl	80005c8 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
 800058e:	200e      	movs	r0, #14
 8000590:	f000 f81a 	bl	80005c8 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 8000594:	2001      	movs	r0, #1
 8000596:	f000 f817 	bl	80005c8 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
 800059a:	2006      	movs	r0, #6
 800059c:	f000 f814 	bl	80005c8 <H_LCD_void_sendCommand>

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  // step 1 : select RS to be in data mode (RS = 1)
   MDIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
 80005ae:	2201      	movs	r2, #1
 80005b0:	210b      	movs	r1, #11
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff04 	bl	80003c0 <MDIO_voidSetPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f836 	bl	800062c <H_LCD_void_writeNlatch>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	// step 1 : select RS to be in command mode (RS = 0)
	MDIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 80005d2:	2200      	movs	r2, #0
 80005d4:	210b      	movs	r1, #11
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fef2 	bl	80003c0 <MDIO_voidSetPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f824 	bl	800062c <H_LCD_void_writeNlatch>

}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
   while(*pstr)
 80005f4:	e009      	b.n	800060a <H_LCD_void_sendString+0x1e>
   {
	   H_LCD_void_sendData(*pstr);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f993 3000 	ldrsb.w	r3, [r3]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffd0 	bl	80005a4 <H_LCD_void_sendData>
	   pstr++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
   while(*pstr)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f993 3000 	ldrsb.w	r3, [r3]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f0      	bne.n	80005f6 <H_LCD_void_sendString+0xa>
   }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ffd0 	bl	80005c8 <H_LCD_void_sendCommand>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <H_LCD_void_writeNlatch>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{

}
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
 	MDIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	MDIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fec0 	bl	80003c0 <MDIO_voidSetPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	MDIO_voidSetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	091b      	lsrs	r3, r3, #4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	210f      	movs	r1, #15
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff feb5 	bl	80003c0 <MDIO_voidSetPinValue>
 	MDIO_voidSetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	095b      	lsrs	r3, r3, #5
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	210e      	movs	r1, #14
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff feaa 	bl	80003c0 <MDIO_voidSetPinValue>
 	MDIO_voidSetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	099b      	lsrs	r3, r3, #6
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	210d      	movs	r1, #13
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fe9f 	bl	80003c0 <MDIO_voidSetPinValue>
 	MDIO_voidSetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	09db      	lsrs	r3, r3, #7
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	210c      	movs	r1, #12
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fe97 	bl	80003c0 <MDIO_voidSetPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	 	MDIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN,DIO_HIGH);
 8000692:	2201      	movs	r2, #1
 8000694:	2108      	movs	r1, #8
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fe92 	bl	80003c0 <MDIO_voidSetPinValue>
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff09 	bl	80004b4 <_delay_ms>
 	  // step 4 : deactivate Enable (E = 0)
 	 	MDIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff fe8a 	bl	80003c0 <MDIO_voidSetPinValue>
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f7ff ff01 	bl	80004b4 <_delay_ms>
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	MDIO_voidSetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	210f      	movs	r1, #15
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fe7e 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	MDIO_voidSetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	085b      	lsrs	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	210e      	movs	r1, #14
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fe73 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	MDIO_voidSetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	210d      	movs	r1, #13
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fe68 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	MDIO_voidSetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	210c      	movs	r1, #12
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fe5d 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	MDIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN,DIO_HIGH);
 8000706:	2201      	movs	r2, #1
 8000708:	2108      	movs	r1, #8
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fe58 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fecf 	bl	80004b4 <_delay_ms>
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	MDIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fe50 	bl	80003c0 <MDIO_voidSetPinValue>
 	 	 // step 10 : delay to allow LCD to process
 	 	_delay_ms(5);
 8000720:	2005      	movs	r0, #5
 8000722:	f7ff fec7 	bl	80004b4 <_delay_ms>
#else
  #error("Wrong LCD mode")
#endif

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <H_PB_Void_init>:
		asm("NOP");
	}
}

void H_PB_Void_init(const PB_t* pcopy_PB)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	// set direction
	MDIO_voidSetPinDirection(pcopy_PB->PB_port, pcopy_PB->PB_pin, IN_PULL_UP_DOWN) ;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7858      	ldrb	r0, [r3, #1]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	789b      	ldrb	r3, [r3, #2]
 800073e:	2208      	movs	r2, #8
 8000740:	4619      	mov	r1, r3
 8000742:	f7ff fd69 	bl	8000218 <MDIO_voidSetPinDirection>

	//MDIO_voidSetPinValue(pcopy_PB->PB_port,pcopy_PB->PB_pin, DIO_HIGH)  ;
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MRCC_voidSysClkInit>:
#include	"RCC_config.h"



void	MRCC_voidSysClkInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MRCC_voidSysClkInit+0x30>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <MRCC_voidSysClkInit+0x30>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MRCC_voidSysClkInit+0x34>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <MRCC_voidSysClkInit+0x34>)
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MRCC_voidSysClkInit+0x34>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <MRCC_voidSysClkInit+0x34>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000
 8000784:	40021004 	.word	0x40021004

08000788 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b1f      	cmp	r3, #31
 800079c:	d82a      	bhi.n	80007f4 <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d01c      	beq.n	80007de <MRCC_voidEnablePerClk+0x56>
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	dc25      	bgt.n	80007f4 <MRCC_voidEnablePerClk+0x6c>
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <MRCC_voidEnablePerClk+0x2a>
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d00b      	beq.n	80007c8 <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 80007b0:	e020      	b.n	80007f4 <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MRCC_voidEnablePerClk+0x78>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	79ba      	ldrb	r2, [r7, #6]
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MRCC_voidEnablePerClk+0x78>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e015      	b.n	80007f4 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MRCC_voidEnablePerClk+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	79ba      	ldrb	r2, [r7, #6]
 80007ce:	2101      	movs	r1, #1
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <MRCC_voidEnablePerClk+0x7c>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	e00a      	b.n	80007f4 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MRCC_voidEnablePerClk+0x80>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <MRCC_voidEnablePerClk+0x80>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	bf00      	nop
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021014 	.word	0x40021014
 8000804:	4002101c 	.word	0x4002101c
 8000808:	40021018 	.word	0x40021018

0800080c <H_SSD_Void_init>:
		asm("NOP");
	}
}

void H_SSD_Void_init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	//set all SSD pins as output
	MDIO_voidSetPinDirection(SSD_LED_A_PORT, SSD_LED_A_PIN, OUT_2MHZ_PP) ;
 8000810:	2202      	movs	r2, #2
 8000812:	210b      	movs	r1, #11
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fcff 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_B_PORT, SSD_LED_B_PIN, OUT_2MHZ_PP) ;
 800081a:	2202      	movs	r2, #2
 800081c:	2108      	movs	r1, #8
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fcfa 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_C_PORT, SSD_LED_C_PIN, OUT_2MHZ_PP) ;
 8000824:	2202      	movs	r2, #2
 8000826:	210f      	movs	r1, #15
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fcf5 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_D_PORT, SSD_LED_D_PIN, OUT_2MHZ_PP) ;
 800082e:	2202      	movs	r2, #2
 8000830:	210e      	movs	r1, #14
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fcf0 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_E_PORT, SSD_LED_E_PIN, OUT_2MHZ_PP) ;
 8000838:	2202      	movs	r2, #2
 800083a:	210d      	movs	r1, #13
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff fceb 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_F_PORT, SSD_LED_F_PIN, OUT_2MHZ_PP) ;
 8000842:	2202      	movs	r2, #2
 8000844:	210c      	movs	r1, #12
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fce6 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_G_PORT, SSD_LED_G_PIN, OUT_2MHZ_PP) ;
 800084c:	2202      	movs	r2, #2
 800084e:	210c      	movs	r1, #12
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fce1 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_LED_DOT_PORT, SSD_LED_DOT_PIN, OUT_2MHZ_PP) ;
 8000856:	2202      	movs	r2, #2
 8000858:	210f      	movs	r1, #15
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fcdc 	bl	8000218 <MDIO_voidSetPinDirection>

	//set enable pins at output
	MDIO_voidSetPinDirection(SSD_DIG_1_EN_PORT, SSD_DIG_1_EN_PIN, OUT_2MHZ_PP) ;
 8000860:	2202      	movs	r2, #2
 8000862:	2109      	movs	r1, #9
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fcd7 	bl	8000218 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN, OUT_2MHZ_PP) ;
 800086a:	2202      	movs	r2, #2
 800086c:	2108      	movs	r1, #8
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fcd2 	bl	8000218 <MDIO_voidSetPinDirection>

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a6:	f000 f811 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fc7b 	bl	80001a4 <main>

080008ae <LoopForever>:

LoopForever:
  b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   r0, =_estack
 80008b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008bc:	0800094c 	.word	0x0800094c
  ldr r2, =_sbss
 80008c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008c4:	2000001c 	.word	0x2000001c

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	2600      	movs	r6, #0
 80008d0:	4d0c      	ldr	r5, [pc, #48]	; (8000904 <__libc_init_array+0x38>)
 80008d2:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	f000 f81a 	bl	8000914 <_init>
 80008e0:	2600      	movs	r6, #0
 80008e2:	4d0a      	ldr	r5, [pc, #40]	; (800090c <__libc_init_array+0x40>)
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <__libc_init_array+0x44>)
 80008e6:	1b64      	subs	r4, r4, r5
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	08000944 	.word	0x08000944
 8000908:	08000944 	.word	0x08000944
 800090c:	08000944 	.word	0x08000944
 8000910:	08000948 	.word	0x08000948

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr
