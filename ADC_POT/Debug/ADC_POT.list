
ADC_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c18  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d48  08000d48  00010d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d54  08000d54  00010d5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d54  08000d54  00010d5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d54  08000d5c  00010d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d54  08000d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d58  08000d58  00010d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000d5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000d5c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bd7  00000000  00000000  00010d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000593  00000000  00000000  0001195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00011ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00012098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f69  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a33  00000000  00000000  00013141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d62  00000000  00000000  00013b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000178d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d8  00000000  00000000  00017928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d30 	.word	0x08000d30

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d30 	.word	0x08000d30

08000170 <_delay_ms>:
#include	"ADC_config.h"
#include	"ADC_int.h"

	/******************* Functions Definition ********************/
void	_delay_ms(u32 _ms)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e003      	b.n	8000186 <_delay_ms+0x16>
	{
		asm("NOP");
 800017e:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800018c:	fb02 f303 	mul.w	r3, r2, r3
 8000190:	68fa      	ldr	r2, [r7, #12]
 8000192:	429a      	cmp	r2, r3
 8000194:	d3f3      	bcc.n	800017e <_delay_ms+0xe>
	}
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	3714      	adds	r7, #20
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <ADC_void_init>:
void	ADC_void_init	(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	// ON ADC -> ADON -> 1
	SET_BIT(ADC->CR2 , 0);
 80001a8:	4b24      	ldr	r3, [pc, #144]	; (800023c <ADC_void_init+0x98>)
 80001aa:	689b      	ldr	r3, [r3, #8]
 80001ac:	4a23      	ldr	r2, [pc, #140]	; (800023c <ADC_void_init+0x98>)
 80001ae:	f043 0301 	orr.w	r3, r3, #1
 80001b2:	6093      	str	r3, [r2, #8]
	_delay_ms(20);
 80001b4:	2014      	movs	r0, #20
 80001b6:	f7ff ffdb 	bl	8000170 <_delay_ms>
	SET_BIT(ADC->CR2 , 0);
 80001ba:	4b20      	ldr	r3, [pc, #128]	; (800023c <ADC_void_init+0x98>)
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	4a1f      	ldr	r2, [pc, #124]	; (800023c <ADC_void_init+0x98>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6093      	str	r3, [r2, #8]
	SET_BIT(ADC->CR2 , 0);
 80001c6:	4b1d      	ldr	r3, [pc, #116]	; (800023c <ADC_void_init+0x98>)
 80001c8:	689b      	ldr	r3, [r3, #8]
 80001ca:	4a1c      	ldr	r2, [pc, #112]	; (800023c <ADC_void_init+0x98>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6093      	str	r3, [r2, #8]

	// Set External event select for regular group -> SWSTART -> 111
	SET_BIT(ADC->CR2 , 19);
 80001d2:	4b1a      	ldr	r3, [pc, #104]	; (800023c <ADC_void_init+0x98>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	4a19      	ldr	r2, [pc, #100]	; (800023c <ADC_void_init+0x98>)
 80001d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001dc:	6093      	str	r3, [r2, #8]
	SET_BIT(ADC->CR2 , 17);
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <ADC_void_init+0x98>)
 80001e0:	689b      	ldr	r3, [r3, #8]
 80001e2:	4a16      	ldr	r2, [pc, #88]	; (800023c <ADC_void_init+0x98>)
 80001e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e8:	6093      	str	r3, [r2, #8]
	SET_BIT(ADC->CR2 , 18);
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <ADC_void_init+0x98>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	4a13      	ldr	r2, [pc, #76]	; (800023c <ADC_void_init+0x98>)
 80001f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001f4:	6093      	str	r3, [r2, #8]

	// Set External trigger conversion mode for regular channels
	SET_BIT(ADC->CR2 , 20);
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <ADC_void_init+0x98>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	4a10      	ldr	r2, [pc, #64]	; (800023c <ADC_void_init+0x98>)
 80001fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000200:	6093      	str	r3, [r2, #8]
	// Set  Data alignment -> Right Alignment -> ALIGN > 0
	CLR_BIT(ADC->CR2 , 11);
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <ADC_void_init+0x98>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a0d      	ldr	r2, [pc, #52]	; (800023c <ADC_void_init+0x98>)
 8000208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800020c:	6093      	str	r3, [r2, #8]
	// Set Single conversion mode -> CONT -> 0
	CLR_BIT(ADC->CR2 , 1);
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <ADC_void_init+0x98>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <ADC_void_init+0x98>)
 8000214:	f023 0302 	bic.w	r3, r3, #2
 8000218:	6093      	str	r3, [r2, #8]

	// Set Number of Conversion in Regular Mode -> Default -> 1


	// Start Calibration -> CAL -> 1
	SET_BIT(ADC->CR2 , 2);
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <ADC_void_init+0x98>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	4a07      	ldr	r2, [pc, #28]	; (800023c <ADC_void_init+0x98>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6093      	str	r3, [r2, #8]
	while(GET_BIT(ADC->CR2 , 2) != 0);
 8000226:	bf00      	nop
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <ADC_void_init+0x98>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	089b      	lsrs	r3, r3, #2
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d1f8      	bne.n	8000228 <ADC_void_init+0x84>

}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40012400 	.word	0x40012400

08000240 <ADC_u16_read>:
u16		ADC_u16_read	(Channel_ID Copy_enuChannel)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	u32 Local_u32Reading;
	// Set Channel
	if(Copy_enuChannel <= CHANNEL_9)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b09      	cmp	r3, #9
 800024e:	d81d      	bhi.n	800028c <ADC_u16_read+0x4c>
	{

		//ADC->SQR3 &= 0xfffffff0; // Clear 0 -> 4 bits
		//ADC->SQR3 |= Copy_enuChannel;
		CLR_BIT(ADC->SQR3 , 0);
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <ADC_u16_read+0x78>)
 8000252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000254:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <ADC_u16_read+0x78>)
 8000256:	f023 0301 	bic.w	r3, r3, #1
 800025a:	6353      	str	r3, [r2, #52]	; 0x34
		CLR_BIT(ADC->SQR3 , 1);
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <ADC_u16_read+0x78>)
 800025e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <ADC_u16_read+0x78>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6353      	str	r3, [r2, #52]	; 0x34
		CLR_BIT(ADC->SQR3 , 2);
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <ADC_u16_read+0x78>)
 800026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <ADC_u16_read+0x78>)
 800026e:	f023 0304 	bic.w	r3, r3, #4
 8000272:	6353      	str	r3, [r2, #52]	; 0x34
		CLR_BIT(ADC->SQR3 , 3);
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <ADC_u16_read+0x78>)
 8000276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <ADC_u16_read+0x78>)
 800027a:	f023 0308 	bic.w	r3, r3, #8
 800027e:	6353      	str	r3, [r2, #52]	; 0x34
		CLR_BIT(ADC->SQR3 , 4);
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <ADC_u16_read+0x78>)
 8000282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000284:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <ADC_u16_read+0x78>)
 8000286:	f023 0310 	bic.w	r3, r3, #16
 800028a:	6353      	str	r3, [r2, #52]	; 0x34

	}

	// Start conversion of regular channels -> SWSTART -> 1
	SET_BIT(ADC->CR2 , 22);
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <ADC_u16_read+0x78>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <ADC_u16_read+0x78>)
 8000292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000296:	6093      	str	r3, [r2, #8]
	// Wait until the end of conversion -> SWSTART -> 0
	//while(GET_BIT(ADC->CR2 , 22) == 1);

	while(GET_BIT(ADC->SR , 1) != 1);
 8000298:	bf00      	nop
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <ADC_u16_read+0x78>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	085b      	lsrs	r3, r3, #1
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d1f8      	bne.n	800029a <ADC_u16_read+0x5a>
	while(GET_BIT(ADC->SR , 1) != 1);
*/
	// Get data -> 0 -> 15
//	Local_u32Reading = (ADC->DR) & 0x0000ffff;
	// Return Data
	return ADC->DR;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <ADC_u16_read+0x78>)
 80002aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ac:	b29b      	uxth	r3, r3
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40012400 	.word	0x40012400

080002bc <M_DIO_void_setPinDir>:
#include	"DIO_interface.h"
#include	"DIO_private.h"


void	M_DIO_void_setPinDir(u8 PortId, u8 PinId, u8 Direction)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	460b      	mov	r3, r1
 80002c8:	71bb      	strb	r3, [r7, #6]
 80002ca:	4613      	mov	r3, r2
 80002cc:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16 && Direction < 16)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	f200 80b6 	bhi.w	8000442 <M_DIO_void_setPinDir+0x186>
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	2b0f      	cmp	r3, #15
 80002da:	f200 80b2 	bhi.w	8000442 <M_DIO_void_setPinDir+0x186>
 80002de:	797b      	ldrb	r3, [r7, #5]
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	f200 80ae 	bhi.w	8000442 <M_DIO_void_setPinDir+0x186>
	{
		if(PinId < 8) /*	Pin0 : Pin7 ==> CRL	*/
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d852      	bhi.n	8000392 <M_DIO_void_setPinDir+0xd6>
		{
			switch(PortId)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d037      	beq.n	8000362 <M_DIO_void_setPinDir+0xa6>
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	f300 80a5 	bgt.w	8000442 <M_DIO_void_setPinDir+0x186>
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <M_DIO_void_setPinDir+0x46>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d018      	beq.n	8000332 <M_DIO_void_setPinDir+0x76>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}	
}
 8000300:	e09f      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTA	:	GPIOA_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000302:	4b52      	ldr	r3, [pc, #328]	; (800044c <M_DIO_void_setPinDir+0x190>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	210f      	movs	r1, #15
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	43d2      	mvns	r2, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a4d      	ldr	r2, [pc, #308]	; (800044c <M_DIO_void_setPinDir+0x190>)
 8000316:	400b      	ands	r3, r1
 8000318:	6013      	str	r3, [r2, #0]
								GPIOA_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 800031a:	4b4c      	ldr	r3, [pc, #304]	; (800044c <M_DIO_void_setPinDir+0x190>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	7979      	ldrb	r1, [r7, #5]
 8000320:	79ba      	ldrb	r2, [r7, #6]
 8000322:	0092      	lsls	r2, r2, #2
 8000324:	fa01 f202 	lsl.w	r2, r1, r2
 8000328:	4611      	mov	r1, r2
 800032a:	4a48      	ldr	r2, [pc, #288]	; (800044c <M_DIO_void_setPinDir+0x190>)
 800032c:	430b      	orrs	r3, r1
 800032e:	6013      	str	r3, [r2, #0]
								break;
 8000330:	e087      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTB	:	GPIOB_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000332:	4b47      	ldr	r3, [pc, #284]	; (8000450 <M_DIO_void_setPinDir+0x194>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	79ba      	ldrb	r2, [r7, #6]
 8000338:	0092      	lsls	r2, r2, #2
 800033a:	210f      	movs	r1, #15
 800033c:	fa01 f202 	lsl.w	r2, r1, r2
 8000340:	43d2      	mvns	r2, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a42      	ldr	r2, [pc, #264]	; (8000450 <M_DIO_void_setPinDir+0x194>)
 8000346:	400b      	ands	r3, r1
 8000348:	6013      	str	r3, [r2, #0]
								GPIOB_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 800034a:	4b41      	ldr	r3, [pc, #260]	; (8000450 <M_DIO_void_setPinDir+0x194>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	7979      	ldrb	r1, [r7, #5]
 8000350:	79ba      	ldrb	r2, [r7, #6]
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a3d      	ldr	r2, [pc, #244]	; (8000450 <M_DIO_void_setPinDir+0x194>)
 800035c:	430b      	orrs	r3, r1
 800035e:	6013      	str	r3, [r2, #0]
								break;
 8000360:	e06f      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTC	:	GPIOC_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000362:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <M_DIO_void_setPinDir+0x198>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	210f      	movs	r1, #15
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	43d2      	mvns	r2, r2
 8000372:	4611      	mov	r1, r2
 8000374:	4a37      	ldr	r2, [pc, #220]	; (8000454 <M_DIO_void_setPinDir+0x198>)
 8000376:	400b      	ands	r3, r1
 8000378:	6013      	str	r3, [r2, #0]
								GPIOC_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 800037a:	4b36      	ldr	r3, [pc, #216]	; (8000454 <M_DIO_void_setPinDir+0x198>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	7979      	ldrb	r1, [r7, #5]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	0092      	lsls	r2, r2, #2
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	4611      	mov	r1, r2
 800038a:	4a32      	ldr	r2, [pc, #200]	; (8000454 <M_DIO_void_setPinDir+0x198>)
 800038c:	430b      	orrs	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
								break;
 8000390:	e057      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
		}else if(PinId < 16) /*	Pin8 : Pin15 ==> CRH	*/
 8000392:	79bb      	ldrb	r3, [r7, #6]
 8000394:	2b0f      	cmp	r3, #15
 8000396:	d854      	bhi.n	8000442 <M_DIO_void_setPinDir+0x186>
			PinId -= 8 ;
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	3b08      	subs	r3, #8
 800039c:	71bb      	strb	r3, [r7, #6]
			switch(PortId)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d036      	beq.n	8000412 <M_DIO_void_setPinDir+0x156>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	dc4c      	bgt.n	8000442 <M_DIO_void_setPinDir+0x186>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <M_DIO_void_setPinDir+0xf6>
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d018      	beq.n	80003e2 <M_DIO_void_setPinDir+0x126>
}
 80003b0:	e047      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTA	:	GPIOA_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80003b2:	4b29      	ldr	r3, [pc, #164]	; (8000458 <M_DIO_void_setPinDir+0x19c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	79ba      	ldrb	r2, [r7, #6]
 80003b8:	0092      	lsls	r2, r2, #2
 80003ba:	210f      	movs	r1, #15
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <M_DIO_void_setPinDir+0x19c>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
								GPIOA_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <M_DIO_void_setPinDir+0x19c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	7979      	ldrb	r1, [r7, #5]
 80003d0:	79ba      	ldrb	r2, [r7, #6]
 80003d2:	0092      	lsls	r2, r2, #2
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <M_DIO_void_setPinDir+0x19c>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
								break;
 80003e0:	e02f      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTB	:	GPIOB_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <M_DIO_void_setPinDir+0x1a0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a19      	ldr	r2, [pc, #100]	; (800045c <M_DIO_void_setPinDir+0x1a0>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	6013      	str	r3, [r2, #0]
								GPIOB_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <M_DIO_void_setPinDir+0x1a0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	7979      	ldrb	r1, [r7, #5]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a14      	ldr	r2, [pc, #80]	; (800045c <M_DIO_void_setPinDir+0x1a0>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
								break;
 8000410:	e017      	b.n	8000442 <M_DIO_void_setPinDir+0x186>
				case PORTC	:	GPIOC_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <M_DIO_void_setPinDir+0x1a4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	79ba      	ldrb	r2, [r7, #6]
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	210f      	movs	r1, #15
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	43d2      	mvns	r2, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <M_DIO_void_setPinDir+0x1a4>)
 8000426:	400b      	ands	r3, r1
 8000428:	6013      	str	r3, [r2, #0]
								GPIOC_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <M_DIO_void_setPinDir+0x1a4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	7979      	ldrb	r1, [r7, #5]
 8000430:	79ba      	ldrb	r2, [r7, #6]
 8000432:	0092      	lsls	r2, r2, #2
 8000434:	fa01 f202 	lsl.w	r2, r1, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <M_DIO_void_setPinDir+0x1a4>)
 800043c:	430b      	orrs	r3, r1
 800043e:	6013      	str	r3, [r2, #0]
								break;
 8000440:	bf00      	nop
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00
 8000454:	40011000 	.word	0x40011000
 8000458:	40010804 	.word	0x40010804
 800045c:	40010c04 	.word	0x40010c04
 8000460:	40011004 	.word	0x40011004

08000464 <M_DIO_void_setPinVal>:
void	M_DIO_void_setPinVal(u8 PortId, u8 PinId, u8 Value)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	460b      	mov	r3, r1
 8000470:	71bb      	strb	r3, [r7, #6]
 8000472:	4613      	mov	r3, r2
 8000474:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b02      	cmp	r3, #2
 800047a:	d861      	bhi.n	8000540 <M_DIO_void_setPinVal+0xdc>
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d85e      	bhi.n	8000540 <M_DIO_void_setPinVal+0xdc>
	{
		if(Value == DIO_LOW)
 8000482:	797b      	ldrb	r3, [r7, #5]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d12d      	bne.n	80004e4 <M_DIO_void_setPinVal+0x80>
		{
			switch(PortId)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d01e      	beq.n	80004cc <M_DIO_void_setPinVal+0x68>
 800048e:	2b02      	cmp	r3, #2
 8000490:	dc56      	bgt.n	8000540 <M_DIO_void_setPinVal+0xdc>
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <M_DIO_void_setPinVal+0x38>
 8000496:	2b01      	cmp	r3, #1
 8000498:	d00c      	beq.n	80004b4 <M_DIO_void_setPinVal+0x50>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}		
}
 800049a:	e051      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTA	:	CLR_BIT(GPIOA_ODR ,PinId);	break;
 800049c:	4b2b      	ldr	r3, [pc, #172]	; (800054c <M_DIO_void_setPinVal+0xe8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	79ba      	ldrb	r2, [r7, #6]
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a27      	ldr	r2, [pc, #156]	; (800054c <M_DIO_void_setPinVal+0xe8>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	e045      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTB	:	CLR_BIT(GPIOB_ODR ,PinId);	break;
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <M_DIO_void_setPinVal+0xec>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	79ba      	ldrb	r2, [r7, #6]
 80004ba:	2101      	movs	r1, #1
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <M_DIO_void_setPinVal+0xec>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	6013      	str	r3, [r2, #0]
 80004ca:	e039      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTC	:	CLR_BIT(GPIOC_ODR ,PinId);	break;
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <M_DIO_void_setPinVal+0xf0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	2101      	movs	r1, #1
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	43d2      	mvns	r2, r2
 80004da:	4611      	mov	r1, r2
 80004dc:	4a1d      	ldr	r2, [pc, #116]	; (8000554 <M_DIO_void_setPinVal+0xf0>)
 80004de:	400b      	ands	r3, r1
 80004e0:	6013      	str	r3, [r2, #0]
 80004e2:	e02d      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
		}else if(Value == DIO_HIGH)
 80004e4:	797b      	ldrb	r3, [r7, #5]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d12a      	bne.n	8000540 <M_DIO_void_setPinVal+0xdc>
			switch(PortId)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d01c      	beq.n	800052a <M_DIO_void_setPinVal+0xc6>
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	dc25      	bgt.n	8000540 <M_DIO_void_setPinVal+0xdc>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <M_DIO_void_setPinVal+0x9a>
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d00b      	beq.n	8000514 <M_DIO_void_setPinVal+0xb0>
}
 80004fc:	e020      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTA	:	SET_BIT(GPIOA_ODR ,PinId);	break;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <M_DIO_void_setPinVal+0xe8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <M_DIO_void_setPinVal+0xe8>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	e015      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTB	:	SET_BIT(GPIOB_ODR ,PinId);	break;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <M_DIO_void_setPinVal+0xec>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	79ba      	ldrb	r2, [r7, #6]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <M_DIO_void_setPinVal+0xec>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e00a      	b.n	8000540 <M_DIO_void_setPinVal+0xdc>
				case PORTC	:	SET_BIT(GPIOC_ODR ,PinId);	break;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <M_DIO_void_setPinVal+0xf0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79ba      	ldrb	r2, [r7, #6]
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <M_DIO_void_setPinVal+0xf0>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6013      	str	r3, [r2, #0]
 800053e:	bf00      	nop
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	4001080c 	.word	0x4001080c
 8000550:	40010c0c 	.word	0x40010c0c
 8000554:	4001100c 	.word	0x4001100c

08000558 <_delay_ms>:
#include "LCD_config.h"
#include "LCD_int.h"


static void	_delay_ms(u32 _ms)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e003      	b.n	800056e <_delay_ms+0x16>
	{
		asm("NOP");
 8000566:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3f3      	bcc.n	8000566 <_delay_ms+0xe>
	}
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <H_LCD_void_Init>:

void H_LCD_void_Init(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0

	// set direction Rs, EN
	M_DIO_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT_2MHZ_PP);
 800058e:	2202      	movs	r2, #2
 8000590:	210b      	movs	r1, #11
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe92 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT_2MHZ_PP);
 8000598:	2202      	movs	r2, #2
 800059a:	2108      	movs	r1, #8
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff fe8d 	bl	80002bc <M_DIO_void_setPinDir>
	//set direction D4 .. D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT_2MHZ_PP);
 80005a2:	2202      	movs	r2, #2
 80005a4:	210c      	movs	r1, #12
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff fe88 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT_2MHZ_PP);
 80005ac:	2202      	movs	r2, #2
 80005ae:	210d      	movs	r1, #13
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff fe83 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT_2MHZ_PP);
 80005b6:	2202      	movs	r2, #2
 80005b8:	210e      	movs	r1, #14
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff fe7e 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT_2MHZ_PP);
 80005c0:	2202      	movs	r2, #2
 80005c2:	210f      	movs	r1, #15
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff fe79 	bl	80002bc <M_DIO_void_setPinDir>
	// send Init Sequence
#if(LCD_MODE  == LCD_8BIT_MODE_)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
 80005ca:	2023      	movs	r0, #35	; 0x23
 80005cc:	f7ff ffc4 	bl	8000558 <_delay_ms>
	// Rs = command = 0
	M_DIO_void_setPinVal(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 80005d0:	2200      	movs	r2, #0
 80005d2:	210b      	movs	r1, #11
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ff45 	bl	8000464 <M_DIO_void_setPinVal>
	// EN = 0 disabled
	M_DIO_void_setPinVal(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff40 	bl	8000464 <M_DIO_void_setPinVal>
	// prepare data
	M_DIO_void_setPinVal(LCD_D7_PORT,LCD_D7_PIN,0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	210c      	movs	r1, #12
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ff3b 	bl	8000464 <M_DIO_void_setPinVal>
	M_DIO_void_setPinVal(LCD_D6_PORT,LCD_D6_PIN,0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	210d      	movs	r1, #13
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ff36 	bl	8000464 <M_DIO_void_setPinVal>
	M_DIO_void_setPinVal(LCD_D5_PORT,LCD_D5_PIN,1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	210e      	movs	r1, #14
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ff31 	bl	8000464 <M_DIO_void_setPinVal>
	M_DIO_void_setPinVal(LCD_D4_PORT,LCD_D4_PIN,0);
 8000602:	2200      	movs	r2, #0
 8000604:	210f      	movs	r1, #15
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ff2c 	bl	8000464 <M_DIO_void_setPinVal>
	//EN = 1
	M_DIO_void_setPinVal(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
 800060c:	2201      	movs	r2, #1
 800060e:	2108      	movs	r1, #8
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ff27 	bl	8000464 <M_DIO_void_setPinVal>
	// delay 1 msec (to allow latching)
	_delay_ms(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f7ff ff9e 	bl	8000558 <_delay_ms>
	// EN = 0
	M_DIO_void_setPinVal(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 800061c:	2200      	movs	r2, #0
 800061e:	2108      	movs	r1, #8
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ff1f 	bl	8000464 <M_DIO_void_setPinVal>
	// delay to allow processing
	_delay_ms(5);
 8000626:	2005      	movs	r0, #5
 8000628:	f7ff ff96 	bl	8000558 <_delay_ms>
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
 800062c:	2028      	movs	r0, #40	; 0x28
 800062e:	f000 f81d 	bl	800066c <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
 8000632:	200e      	movs	r0, #14
 8000634:	f000 f81a 	bl	800066c <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 f817 	bl	800066c <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
 800063e:	2006      	movs	r0, #6
 8000640:	f000 f814 	bl	800066c <H_LCD_void_sendCommand>

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  // step 1 : select RS to be in data mode (RS = 1)
	M_DIO_void_setPinVal(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
 8000652:	2201      	movs	r2, #1
 8000654:	210b      	movs	r1, #11
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff04 	bl	8000464 <M_DIO_void_setPinVal>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f8c6 	bl	80007f0 <H_LCD_void_writeNlatch>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	// step 1 : select RS to be in command mode (RS = 0)
	M_DIO_void_setPinVal(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 8000676:	2200      	movs	r2, #0
 8000678:	210b      	movs	r1, #11
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fef2 	bl	8000464 <M_DIO_void_setPinVal>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f8b4 	bl	80007f0 <H_LCD_void_writeNlatch>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
   while(*pstr)
 8000698:	e009      	b.n	80006ae <H_LCD_void_sendString+0x1e>
   {
	   H_LCD_void_sendData(*pstr);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f993 3000 	ldrsb.w	r3, [r3]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffd0 	bl	8000648 <H_LCD_void_sendData>
	   pstr++;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
   while(*pstr)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f993 3000 	ldrsb.w	r3, [r3]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f0      	bne.n	800069a <H_LCD_void_sendString+0xa>
   }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <H_LCD_void_sendIntNum>:
void H_LCD_void_clear(void)
{
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
}
void H_LCD_void_sendIntNum(s16 copy_s16Num)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
   u8 Loc_Arr[10]= {0};
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	809a      	strh	r2, [r3, #4]
   s8 i = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	75fb      	strb	r3, [r7, #23]
   if(copy_s16Num == 0)
 80006e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <H_LCD_void_sendIntNum+0x2c>
   {
	   H_LCD_void_sendData('0');
 80006e8:	2030      	movs	r0, #48	; 0x30
 80006ea:	f7ff ffad 	bl	8000648 <H_LCD_void_sendData>
 80006ee:	e04f      	b.n	8000790 <H_LCD_void_sendIntNum+0xcc>
	   return ;
   }
   else if(copy_s16Num < 0)//negative
 80006f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da2b      	bge.n	8000750 <H_LCD_void_sendIntNum+0x8c>
   {
	   H_LCD_void_sendData('-');
 80006f8:	202d      	movs	r0, #45	; 0x2d
 80006fa:	f7ff ffa5 	bl	8000648 <H_LCD_void_sendData>
	   copy_s16Num *= -1;
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	425b      	negs	r3, r3
 8000702:	b29b      	uxth	r3, r3
 8000704:	80fb      	strh	r3, [r7, #6]
   }
   while(copy_s16Num != 0)
 8000706:	e023      	b.n	8000750 <H_LCD_void_sendIntNum+0x8c>
   {
	   Loc_Arr[i] = copy_s16Num % 10;
 8000708:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <H_LCD_void_sendIntNum+0xd4>)
 800070e:	fb83 1302 	smull	r1, r3, r3, r2
 8000712:	1099      	asrs	r1, r3, #2
 8000714:	17d3      	asrs	r3, r2, #31
 8000716:	1ac9      	subs	r1, r1, r3
 8000718:	460b      	mov	r3, r1
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	b21a      	sxth	r2, r3
 8000724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	3318      	adds	r3, #24
 800072c:	443b      	add	r3, r7
 800072e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	   copy_s16Num = copy_s16Num /10 ;
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <H_LCD_void_sendIntNum+0xd4>)
 8000738:	fb82 1203 	smull	r1, r2, r2, r3
 800073c:	1092      	asrs	r2, r2, #2
 800073e:	17db      	asrs	r3, r3, #31
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	80fb      	strh	r3, [r7, #6]
	   i++;
 8000744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	75fb      	strb	r3, [r7, #23]
   while(copy_s16Num != 0)
 8000750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1d7      	bne.n	8000708 <H_LCD_void_sendIntNum+0x44>
   }
   i--;
 8000758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	75fb      	strb	r3, [r7, #23]
   while(i>=0)
 8000764:	e010      	b.n	8000788 <H_LCD_void_sendIntNum+0xc4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
 8000766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800076a:	3318      	adds	r3, #24
 800076c:	443b      	add	r3, r7
 800076e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000772:	3330      	adds	r3, #48	; 0x30
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff66 	bl	8000648 <H_LCD_void_sendData>
	   i--;
 800077c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	3b01      	subs	r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	75fb      	strb	r3, [r7, #23]
   while(i>=0)
 8000788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800078c:	2b00      	cmp	r3, #0
 800078e:	daea      	bge.n	8000766 <H_LCD_void_sendIntNum+0xa2>
   }
}
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	66666667 	.word	0x66666667

0800079c <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	460a      	mov	r2, r1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	4613      	mov	r3, r2
 80007aa:	71bb      	strb	r3, [r7, #6]
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <H_LCD_void_gotXY+0x1c>
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d116      	bne.n	80007e6 <H_LCD_void_gotXY+0x4a>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d813      	bhi.n	80007e6 <H_LCD_void_gotXY+0x4a>
	  {
          switch(copy_u8Row)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <H_LCD_void_gotXY+0x2e>
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d007      	beq.n	80007d8 <H_LCD_void_gotXY+0x3c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
        	  break;
          }
	  }
  }
}
 80007c8:	e00e      	b.n	80007e8 <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	3b80      	subs	r3, #128	; 0x80
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff4b 	bl	800066c <H_LCD_void_sendCommand>
        	  break;
 80007d6:	e007      	b.n	80007e8 <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	3b40      	subs	r3, #64	; 0x40
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff44 	bl	800066c <H_LCD_void_sendCommand>
        	  break;
 80007e4:	e000      	b.n	80007e8 <H_LCD_void_gotXY+0x4c>
	  }
 80007e6:	bf00      	nop
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <H_LCD_void_writeNlatch>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{

}
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
 	M_DIO_void_setPinVal(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_DIO_void_setPinVal(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fe30 	bl	8000464 <M_DIO_void_setPinVal>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_DIO_void_setPinVal(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	210f      	movs	r1, #15
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe25 	bl	8000464 <M_DIO_void_setPinVal>
 	M_DIO_void_setPinVal(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	095b      	lsrs	r3, r3, #5
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	210e      	movs	r1, #14
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe1a 	bl	8000464 <M_DIO_void_setPinVal>
 	M_DIO_void_setPinVal(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	099b      	lsrs	r3, r3, #6
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	210d      	movs	r1, #13
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fe0f 	bl	8000464 <M_DIO_void_setPinVal>
 	M_DIO_void_setPinVal(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	09db      	lsrs	r3, r3, #7
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	210c      	movs	r1, #12
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fe07 	bl	8000464 <M_DIO_void_setPinVal>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_DIO_void_setPinVal(LCD_EN_PORT, LCD_EN_PIN,DIO_HIGH);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe02 	bl	8000464 <M_DIO_void_setPinVal>
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe79 	bl	8000558 <_delay_ms>
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinVal(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fdfa 	bl	8000464 <M_DIO_void_setPinVal>
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 8000870:	2005      	movs	r0, #5
 8000872:	f7ff fe71 	bl	8000558 <_delay_ms>
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_DIO_void_setPinVal(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	210f      	movs	r1, #15
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fdee 	bl	8000464 <M_DIO_void_setPinVal>
 	 	M_DIO_void_setPinVal(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	085b      	lsrs	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	210e      	movs	r1, #14
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fde3 	bl	8000464 <M_DIO_void_setPinVal>
 	 	M_DIO_void_setPinVal(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	089b      	lsrs	r3, r3, #2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	210d      	movs	r1, #13
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff fdd8 	bl	8000464 <M_DIO_void_setPinVal>
 	 	M_DIO_void_setPinVal(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	210c      	movs	r1, #12
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fdcd 	bl	8000464 <M_DIO_void_setPinVal>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_DIO_void_setPinVal(LCD_EN_PORT, LCD_EN_PIN,DIO_HIGH);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2108      	movs	r1, #8
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fdc8 	bl	8000464 <M_DIO_void_setPinVal>
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fe3f 	bl	8000558 <_delay_ms>
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinVal(LCD_EN_PORT, LCD_EN_PIN,DIO_LOW);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fdc0 	bl	8000464 <M_DIO_void_setPinVal>
 	 	 // step 10 : delay to allow LCD to process
 	 	_delay_ms(5);
 80008e4:	2005      	movs	r0, #5
 80008e6:	f7ff fe37 	bl	8000558 <_delay_ms>
#else
  #error("Wrong LCD mode")
#endif

}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MRCC_voidSysClkInit>:
#include	"RCC_config.h"



void	MRCC_voidSysClkInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MRCC_voidSysClkInit+0x30>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a09      	ldr	r2, [pc, #36]	; (8000924 <MRCC_voidSysClkInit+0x30>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MRCC_voidSysClkInit+0x34>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <MRCC_voidSysClkInit+0x34>)
 800090a:	f023 0301 	bic.w	r3, r3, #1
 800090e:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MRCC_voidSysClkInit+0x34>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <MRCC_voidSysClkInit+0x34>)
 8000916:	f023 0302 	bic.w	r3, r3, #2
 800091a:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000
 8000928:	40021004 	.word	0x40021004

0800092c <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	2b1f      	cmp	r3, #31
 8000940:	d82a      	bhi.n	8000998 <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d01c      	beq.n	8000982 <MRCC_voidEnablePerClk+0x56>
 8000948:	2b02      	cmp	r3, #2
 800094a:	dc25      	bgt.n	8000998 <MRCC_voidEnablePerClk+0x6c>
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <MRCC_voidEnablePerClk+0x2a>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d00b      	beq.n	800096c <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000954:	e020      	b.n	8000998 <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MRCC_voidEnablePerClk+0x78>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <MRCC_voidEnablePerClk+0x78>)
 8000966:	430b      	orrs	r3, r1
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	e015      	b.n	8000998 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MRCC_voidEnablePerClk+0x7c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	2101      	movs	r1, #1
 8000974:	fa01 f202 	lsl.w	r2, r1, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <MRCC_voidEnablePerClk+0x7c>)
 800097c:	430b      	orrs	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e00a      	b.n	8000998 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MRCC_voidEnablePerClk+0x80>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <MRCC_voidEnablePerClk+0x80>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	bf00      	nop
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021014 	.word	0x40021014
 80009a8:	4002101c 	.word	0x4002101c
 80009ac:	40021018 	.word	0x40021018

080009b0 <MRCC_voidSetADCPre>:
	}
	else
	{/*		Report Error 			*/}
}
void	MRCC_voidSetADCPre(u8 Copy_u8Pre)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Pre <= RCC_ADC_PRE_8)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d813      	bhi.n	80009e8 <MRCC_voidSetADCPre+0x38>
	{
		CLR_BIT(RCC_CFGR , 14);
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009ca:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC_CFGR , 15);
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d6:	6013      	str	r3, [r2, #0]
		RCC_CFGR |=  Copy_u8Pre << 14;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	0392      	lsls	r2, r2, #14
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <MRCC_voidSetADCPre+0x44>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
	}
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021004 	.word	0x40021004

080009f8 <SysTick_Handler>:
	Local_u32RemainingTime =  (STK -> VAL);
	return Local_u32RemainingTime;
}
//Core Peripheral
void	SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	u8 Local_u8Temp = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SysTick_Handler+0x54>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d111      	bne.n	8000a2e <SysTick_Handler+0x36>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(STK -> CTRL , 1);
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <SysTick_Handler+0x58>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <SysTick_Handler+0x58>)
 8000a10:	f023 0302 	bic.w	r3, r3, #2
 8000a14:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(STK -> CTRL , 0);
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <SysTick_Handler+0x58>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <SysTick_Handler+0x58>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6013      	str	r3, [r2, #0]
			STK -> LOAD	= 0;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <SysTick_Handler+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
			STK -> VAL	= 0;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <SysTick_Handler+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
	}
	SysTick_CallBack();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <SysTick_Handler+0x5c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4798      	blx	r3
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(STK -> CTRL , 16);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SysTick_Handler+0x58>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000020 	.word	0x20000020
 8000a50:	e000e010 	.word	0xe000e010
 8000a54:	2000001c 	.word	0x2000001c

08000a58 <main>:


u16 global_u16Reading = 0;

int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/******************* Initialization ********************/

	// System Clk init
	MRCC_voidSysClkInit();
 8000a5c:	f7ff ff4a 	bl	80008f4 <MRCC_voidSysClkInit>

	// Enable Per Clk "RCC" -> DIO_A , DIO_C, DIO_B
	MRCC_voidEnablePerClk(RCC_APB2,DIO_A);
 8000a60:	2102      	movs	r1, #2
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff ff62 	bl	800092c <MRCC_voidEnablePerClk>
	MRCC_voidEnablePerClk(RCC_APB2,DIO_C);
 8000a68:	2104      	movs	r1, #4
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f7ff ff5e 	bl	800092c <MRCC_voidEnablePerClk>
	MRCC_voidEnablePerClk(RCC_APB2,DIO_B);
 8000a70:	2103      	movs	r1, #3
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff ff5a 	bl	800092c <MRCC_voidEnablePerClk>


	// Set ADC Prescaler
	MRCC_voidSetADCPre(RCC_ADC_PRE_2);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff99 	bl	80009b0 <MRCC_voidSetADCPre>

	// Enable Per Clk "RCC" -> ADC -> 9
	MRCC_voidEnablePerClk(RCC_APB2,9);
 8000a7e:	2109      	movs	r1, #9
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff ff53 	bl	800092c <MRCC_voidEnablePerClk>

	// Set Direction for ADC channel_0 as IN_ANALOG
	M_DIO_void_setPinDir(PORTA, PIN0, IN_ANALOG);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fc16 	bl	80002bc <M_DIO_void_setPinDir>

	// Initialize ADC
	ADC_void_init();
 8000a90:	f7ff fb88 	bl	80001a4 <ADC_void_init>

	// Initialize LCD
	H_LCD_void_Init();
 8000a94:	f7ff fd79 	bl	800058a <H_LCD_void_Init>

	// SET LEDs direction
	M_DIO_void_setPinDir(PORTA, PIN1, OUT_10MHZ_PP);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fc0d 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTA, PIN2, OUT_10MHZ_PP);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fc08 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTC, PIN13, OUT_10MHZ_PP);
 8000aac:	2201      	movs	r2, #1
 8000aae:	210d      	movs	r1, #13
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fc03 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTC, PIN14, OUT_10MHZ_PP);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	210e      	movs	r1, #14
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fbfe 	bl	80002bc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTC, PIN15, OUT_10MHZ_PP);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f7ff fbf9 	bl	80002bc <M_DIO_void_setPinDir>


	/*******************   Super LOOP   ********************/
	while(1)
	{
		H_LCD_void_gotXY(0,1);
 8000aca:	2101      	movs	r1, #1
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fe65 	bl	800079c <H_LCD_void_gotXY>
		H_LCD_void_sendString("ADC Value =");
 8000ad2:	486e      	ldr	r0, [pc, #440]	; (8000c8c <main+0x234>)
 8000ad4:	f7ff fddc 	bl	8000690 <H_LCD_void_sendString>

		H_LCD_void_gotXY(1,6);
 8000ad8:	2106      	movs	r1, #6
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fe5e 	bl	800079c <H_LCD_void_gotXY>
		global_u16Reading = ADC_u16_read(CHANNEL_0);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fbad 	bl	8000240 <ADC_u16_read>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b69      	ldr	r3, [pc, #420]	; (8000c90 <main+0x238>)
 8000aec:	801a      	strh	r2, [r3, #0]
		if( (global_u16Reading>=0) && (global_u16Reading<10) )
 8000aee:	4b68      	ldr	r3, [pc, #416]	; (8000c90 <main+0x238>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d809      	bhi.n	8000b0a <main+0xb2>
		{
			H_LCD_void_sendIntNum(global_u16Reading & 0x000F);
 8000af6:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <main+0x238>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fdde 	bl	80006c4 <H_LCD_void_sendIntNum>
 8000b08:	e005      	b.n	8000b16 <main+0xbe>
		}
		else
		{
			H_LCD_void_sendIntNum(global_u16Reading);
 8000b0a:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <main+0x238>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fdd7 	bl	80006c4 <H_LCD_void_sendIntNum>
		}

		if(global_u16Reading < 50)
 8000b16:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <main+0x238>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	2b31      	cmp	r3, #49	; 0x31
 8000b1c:	d819      	bhi.n	8000b52 <main+0xfa>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_LOW);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fc9e 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_LOW);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fc99 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_LOW);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210d      	movs	r1, #13
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fc94 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_LOW);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	210e      	movs	r1, #14
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff fc8f 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_LOW);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fc8a 	bl	8000464 <M_DIO_void_setPinVal>
 8000b50:	e098      	b.n	8000c84 <main+0x22c>


		}
		else if(global_u16Reading < 100)
 8000b52:	4b4f      	ldr	r3, [pc, #316]	; (8000c90 <main+0x238>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	2b63      	cmp	r3, #99	; 0x63
 8000b58:	d819      	bhi.n	8000b8e <main+0x136>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_HIGH);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fc80 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_LOW);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fc7b 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_LOW);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210d      	movs	r1, #13
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fc76 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_LOW);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	210e      	movs	r1, #14
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff fc71 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_LOW);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fc6c 	bl	8000464 <M_DIO_void_setPinVal>
 8000b8c:	e07a      	b.n	8000c84 <main+0x22c>


		}
		else if(global_u16Reading < 400)
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <main+0x238>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b96:	d219      	bcs.n	8000bcc <main+0x174>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_LOW);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fc61 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_HIGH);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fc5c 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_LOW);
 8000bac:	2200      	movs	r2, #0
 8000bae:	210d      	movs	r1, #13
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff fc57 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_LOW);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210e      	movs	r1, #14
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fc52 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_LOW);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fc4d 	bl	8000464 <M_DIO_void_setPinVal>
 8000bca:	e05b      	b.n	8000c84 <main+0x22c>


		}
		else if(global_u16Reading < 600)
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <main+0x238>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000bd4:	d219      	bcs.n	8000c0a <main+0x1b2>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_LOW);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fc42 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_LOW);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2102      	movs	r1, #2
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fc3d 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_HIGH);
 8000bea:	2201      	movs	r2, #1
 8000bec:	210d      	movs	r1, #13
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f7ff fc38 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_LOW);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	210e      	movs	r1, #14
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc33 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_LOW);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	2002      	movs	r0, #2
 8000c04:	f7ff fc2e 	bl	8000464 <M_DIO_void_setPinVal>
 8000c08:	e03c      	b.n	8000c84 <main+0x22c>


		}
		else if(global_u16Reading < 800)
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <main+0x238>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000c12:	d219      	bcs.n	8000c48 <main+0x1f0>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_LOW);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fc23 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_LOW);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2102      	movs	r1, #2
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fc1e 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_LOW);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	210d      	movs	r1, #13
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fc19 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_HIGH);
 8000c32:	2201      	movs	r2, #1
 8000c34:	210e      	movs	r1, #14
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fc14 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_LOW);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	210f      	movs	r1, #15
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fc0f 	bl	8000464 <M_DIO_void_setPinVal>
 8000c46:	e01d      	b.n	8000c84 <main+0x22c>


		}
		else if(global_u16Reading < 1024)
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <main+0x238>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c50:	d218      	bcs.n	8000c84 <main+0x22c>
		{
			M_DIO_void_setPinVal(PORTA, PIN1,  DIO_LOW);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fc04 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTA, PIN2,  DIO_LOW);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fbff 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN13, DIO_LOW);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210d      	movs	r1, #13
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff fbfa 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN14, DIO_LOW);
 8000c70:	2200      	movs	r2, #0
 8000c72:	210e      	movs	r1, #14
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff fbf5 	bl	8000464 <M_DIO_void_setPinVal>
			M_DIO_void_setPinVal(PORTC, PIN15, DIO_HIGH);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff fbf0 	bl	8000464 <M_DIO_void_setPinVal>


		}
		_delay_ms(250);
 8000c84:	20fa      	movs	r0, #250	; 0xfa
 8000c86:	f7ff fa73 	bl	8000170 <_delay_ms>
		H_LCD_void_gotXY(0,1);
 8000c8a:	e71e      	b.n	8000aca <main+0x72>
 8000c8c:	08000d48 	.word	0x08000d48
 8000c90:	20000022 	.word	0x20000022

08000c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc2:	f000 f811 	bl	8000ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fec7 	bl	8000a58 <main>

08000cca <LoopForever>:

LoopForever:
  b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   r0, =_estack
 8000ccc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cd8:	08000d5c 	.word	0x08000d5c
  ldr r2, =_sbss
 8000cdc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ce0:	20000024 	.word	0x20000024

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>
	...

08000ce8 <__libc_init_array>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	2600      	movs	r6, #0
 8000cec:	4d0c      	ldr	r5, [pc, #48]	; (8000d20 <__libc_init_array+0x38>)
 8000cee:	4c0d      	ldr	r4, [pc, #52]	; (8000d24 <__libc_init_array+0x3c>)
 8000cf0:	1b64      	subs	r4, r4, r5
 8000cf2:	10a4      	asrs	r4, r4, #2
 8000cf4:	42a6      	cmp	r6, r4
 8000cf6:	d109      	bne.n	8000d0c <__libc_init_array+0x24>
 8000cf8:	f000 f81a 	bl	8000d30 <_init>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	4d0a      	ldr	r5, [pc, #40]	; (8000d28 <__libc_init_array+0x40>)
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <__libc_init_array+0x44>)
 8000d02:	1b64      	subs	r4, r4, r5
 8000d04:	10a4      	asrs	r4, r4, #2
 8000d06:	42a6      	cmp	r6, r4
 8000d08:	d105      	bne.n	8000d16 <__libc_init_array+0x2e>
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d10:	4798      	blx	r3
 8000d12:	3601      	adds	r6, #1
 8000d14:	e7ee      	b.n	8000cf4 <__libc_init_array+0xc>
 8000d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d1a:	4798      	blx	r3
 8000d1c:	3601      	adds	r6, #1
 8000d1e:	e7f2      	b.n	8000d06 <__libc_init_array+0x1e>
 8000d20:	08000d54 	.word	0x08000d54
 8000d24:	08000d54 	.word	0x08000d54
 8000d28:	08000d54 	.word	0x08000d54
 8000d2c:	08000d58 	.word	0x08000d58

08000d30 <_init>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	bf00      	nop
 8000d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d36:	bc08      	pop	{r3}
 8000d38:	469e      	mov	lr, r3
 8000d3a:	4770      	bx	lr

08000d3c <_fini>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	bf00      	nop
 8000d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d42:	bc08      	pop	{r3}
 8000d44:	469e      	mov	lr, r3
 8000d46:	4770      	bx	lr
